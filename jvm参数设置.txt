
============================================================================================================================

       Java 运行时 JVM堆参数设置
	   
============================================================================================================================
-Xss:设置虚拟机栈以及本地方法栈的大小。 对于Hotspot来说，虽然-Xoss(设置本地方法栈的大小)存在，但实际无效
    eg、-Xss16K

-Xmx:设置java堆的最大值(新生代与老年代)
   eg、-Xmx5M or -Xmx16k
-Xms:设置java堆的最小值(新生代与老年代)
     如果JVM启动时分配的-Xms不足以使用，会申请更多的内存，直到达到-Xmx指定的内存后抛出OOM
	 但要注意如果指定的-Xms过小，则GC的动作会比较频繁。所以可以将-Xmx和-Xms设置为一样大小。
	 
-Xmn：设置java堆中新生代的大小(Eden + survior to + survior from), 新生代大小一般占内存的1/4 到1/3左右

-XX:NewSize用于设置新生代的初始化大小

-XX:MaxNewSize用于设置新生代初始化的最大大小，设置-Xmn相当于设置了-XX:NewSize以及-XX:MaxNewSize相同的值

-XX:SurvivorRatio设置新生代中Eden区与Survivor区域的大小(两个Survivor区是一样大的) 默认值为8
例如：-XX:SurvivorRatio=3 表示Eden / (单个Survivor) = 3  ==> Eden / (2 * Survivor) = 1.5

-XX:TargetSurvivorRatio:设置Survivor区的可使用率，当使用率大于该值时，该区域对象将会向老年代压缩，默认是50%。

-XX:MaxTenuringThreshold:设置经过几次LJ回收进入老年代,默认为15次。但有两种例外:
                                                                    1、大数据直接进入老年代。如果分配对象所占内存较大，将直接进入老年代。
																	2、当Survivor区域的某一年龄的对象占该区域大小的一定值(好像是50%)时，该区域所有大于等于该年龄的对象都会进入老年代

-XX:PretenureSizeThreshold: 设置大对象直接进入老年代的阈值，当对象分配的大小大于等于该值时，对象将直接进入老年代。
							这个参数不能像-Xmn一样跟3MB 必须像这样：-XX:PretenureSizeThreshold=3145728.且只有Serial和ParNew两款收集器才有效
			
-XX:+HandlePromotionFailure:发生Minor GC前，虚拟机会先检查老年代的最大可用连续空间是否大于新生代的所有对象总空间。如果条件成立，则这次Minor GC是安全的。
                           如果不成立，则会查看该值是否允许担保失败，如果允许，虚拟机查看最大可用连续空间是否大于历次晋升到老年代对象的平均大小，如果大于则会尝试进行一次Minor GC。否则改为进行Full GC
						   eg、-XX:-HandlePromotionFailure //false 已被废弃。
																	
-XX:NewRatio 设置新生代与老年代的比例
例如: -XX:NewRatio = 3 表示 (Eden + Survivor * 2) / Old = 3

-XX:PermSize 设置持久代(永久代方法区)初始大小。已被-XX:MetaspaceSize代替
-XX:MaxPermSize 设置持久代的最大初始大小 一般设置为64MB和128MB，如果这样还不能满足需求，需要对系统进行优化。已被-XX:MaxMetaspaceSize代替

-XX:MaxDirectMemorySize制定直接内存大小。JDK1.4后加入的NIO就是使用这部分内存。只有ByteBuffer的directAllocate方法才会使用这块内存

-XX:MinHeapFreeRatio 设置堆的最小空闲比例，当堆的空闲内存小于该值时，JVM便会扩展堆空间
eg、 -XX:MinHeapFreeRatio=40 当堆的空闲比例大于40时就会扩展堆空间
-XX:MaxHeapFreeRatio 设置堆的最大空闲比例，当堆的空闲内存大于该值时，JVM便会压缩堆
eg、-XX:MaxHeapFreeRatio=80 当堆的最大空闲比例大于80时就会压缩堆空间
============================================================================================================================

       Java 运行时 GC日志参数设置
	   
============================================================================================================================
-XX:+PrintGC          输出GC简易信息
-XX:+PrintGCDetails   输出GC详细信息
-verbose:gc           输出GC简易信息
-XX:+PrintGCTimeStamps 输出GC发生的时间
打印堆信息:-XX:+PrintHeapAtGC:在GC日志后打印堆的信息。
将日志打印到文件中；-Xloggc:C:\a.log

============================================================================================================================

       Java 运行时 GC参数设置
	   
============================================================================================================================

垃圾回收器类型： 1、并行：开启多条线程清理垃圾
                 2、串行：开启一条线程清理垃圾

按照工作模式分： 1、独占式：Stop the World，清理垃圾时，其他线程(正在运行)将停止，直到GC完毕。
                 2、非独占式：GC与运行程序相互交替执行，但这意味着线程的切换，将增大开销，降低系统的吞吐量。

按照碎片处理方式:1、压缩式LJ回收器：在GC完毕后会对存活的对象进行压缩整理。
                 2、非压缩式LJ回收器：不会。
			
按照工作区间划分:1、新生代LJ回收器：新生代。适用清除算法：标记-复制，标记-清除
                 2、老年代LJ回收器: 老年代。适用清除算法：标记-整理。

-XX:+UseSerialGC:新生代与老年代都使用串行独占式LJ回收器(最古老的LJ回收器，但性能经受住了考验)
-XX:+UseParNewGC:新生代使用并行LJ回收器，老年代使用串行LJ回收器
-XX:+UseParallelGC: 新生代使用并行回收，老年代使用串行回收
-XX:+UseParallelOldGC:新生代与老年代都使用并行回收器
-XX:+UseConcMarkSweepGC:新生代使用并行收集，老年代使用CMS收集
-XX:ParallelCMSThreads:设定CMS的线程数量
-XX:CMSInitiatingOccupancyFraction: 设置CMS收集器在老年代空间被使用多少后触发，默认68%

#G1回收器
-XX:GCPauseIntervalMillis 设置停顿时间
-XX:MaxGCPauseMillis 最大停顿时间
-XX:+UseG1GC  使用G1回收器进行回收
-XX:+UnlockExperimentalVMOptions 开启G1回收器可以使用一些实验性参数

-XX:GCTimeRatio 设置吞吐量大小，值为0 ~ 100之间的整数，然后将不会花费超过 1/(1 + n)的时间进行lj回收
-XX:+UseAdaptiveSizePolicy 打开自适应GC策略，这个策略下，eden，survior，晋升阈值都会被自动调整，以达到在堆大小、吞吐量和停顿时间之间的平衡点。

并行收集器的线程数可以使用-XX:ParalleGCThreads指定，一般下 最好与CPU数相当，
ps:新生代GC叫做Minor GC 老年代GC叫做Full GC/ Major GC。Full GC的成本高于Minor GC。 发生一次Full GC通常会伴随着至少一次的Minor GC。且Full GC的速度比Minor GC慢10倍以上。
更正ps：发生了stw现象的为full gc
================================================================================================================================

               JIT编译参数设置
			
=================================================================================================================================

当方法调用次数超过一定的阈值时，JIT(即时编译器)会将方法编译为本地代码。可以加快执行的速度。
在Client模式下默认为1500，在Server模式下默认为10000

可以通过参数:-XX:CompileThreshold指定次数。
             -XX:+CITime打印出JIT编译耗费的时间。
			 -XX:+PrintCompilation打印出JIT编译时的信息。

=========================================优化======================================================================================

禁用代码显示调用GC：-XX:+DisableExplicitGC 例如System.gc()调用后将不会进行GC

为了加快启动速度，如果加载的类是可信任的，可以使用参数-Xverify:none跳过class的验证与校检
为了加快Minor GC的速度：新生代使用并行收集器:-XX:+UseParallelGC


浅堆：指对象结构占用内存大小，比如String对象 浅堆大小 三个int + byte[] = 3 * 4 + 4 + 8(对象头) = 24.无论字符串多大，它的浅堆大小始终是24
深堆：指对象被GC回收后释放的内存。包括仅仅该对象持有的对象占用的内存。

=========================================other======================================================================================
-XX:+TraceClassLoading 打开类加载过程 或者使用参数-verbose:class也能达到同样的效果
-XX:+TraceClassUnloading 打开类卸载过程
-XX:+PrintClassHistogram 打印运行时类的实例信息  好像没有用处，也许是我的测试方法不正确吧
-Xnoclassgc 以这个参数启动程序将不会发生类的卸载
-Xincgc, 系统将会进行增量式的GC，系统将会使用特定的算法让GC线程与应用程序进行交互。

-XX:-UseSplitVerifier 关闭新的类校检器 JDK6以上默认使用新的类校检器进行校检，如果使用新的校检失败，则会使用老的校检
-XX:-FailOverToOldVerifier 关闭新的校检器失败时启用老的校检器，-号代表关闭 +号代表开启

-XX:+UseCompressedOops 打开指针压缩
                       可以对Class的属性指针，对象的属性指针，普通数组对象的每个元素指针
-XX:+UseLargePages 启动大页 可以提升系统性能
-XX:LargePageSizeInBytes 指定大页的大小 -XX:LargePageSizeInBytes=256m
当发生OOM时，可以将当前堆快照存储以便事后分析：-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=F:\a.txt
                  使用jhat指令可以分析堆快照
OOM错误处理：-XX:OnOutOfMemoryError=F:\a.bat

打印GC日志：
          /** -XX:+PrintGC          输出GC简易信息
		   *  -XX:+PrintGCDetails   输出GC详细信息
		   *  -verbose:gc           输出GC简易信息
		   */

查看新生对象进入老年代的阈值：-XX:+PrintTenuringDistribution -XX:MaxTenuringThreshold=18


查看GC与应用程序相互执行的耗时：—XX:+PrintGCApplicationStopTime -XX:+PrintApplicationConcurrentTime

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
锁的强度
无锁 --> 偏向锁 --> 轻量级锁 --> 重量级锁 强度只能升级 不能降级

-XX:BiasedLockingStartupDelay=0 JAVA6 / JAVA7 偏向锁在程序启动后会有延迟 可以使用这个参数设置延迟
-XX:UseBiasedLocking=false 关闭偏向锁，默认是开启的




